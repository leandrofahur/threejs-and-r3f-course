# Three.js Course Makefile
# Digital Polymath - Engineering Workflow Management

.PHONY: help install dev build clean scenes list-scenes run-scene switch-scene restore-main setup

# Default target
help:
	@echo "Three.js Course Development Commands:"
	@echo ""
	@echo "Setup & Dependencies:"
	@echo "  make install     - Install all dependencies"
	@echo "  make setup       - Initial project setup"
	@echo ""
	@echo "Development:"
	@echo "  make dev         - Start development server"
	@echo "  make build       - Build for production"
	@echo "  make clean       - Clean build artifacts"
	@echo ""
	@echo "Scene Management:"
	@echo "  make scenes      - List all available scenes"
	@echo "  make run-scene   - Run a specific scene (usage: make run-scene SCENE=scene-name)"
	@echo "  make switch-scene - Switch to a scene without starting dev server"
	@echo "  make restore-main - Restore original main.js from backup"
	@echo ""
	@echo "Examples:"
	@echo "  make run-scene SCENE=creating-a-scene"
	@echo "  make run-scene SCENE=creating-a-line"
	@echo "  make run-scene SCENE=manipulating-meshes"

# Install dependencies
install:
	@echo "Installing dependencies..."
	cd basics && pnpm install
	@echo "✅ Dependencies installed successfully!"

# Initial project setup
setup: install
	@echo "Setting up Three.js course project..."
	@echo "✅ Project setup complete!"
	@echo "Run 'make dev' to start development"

# Start development server
dev:
	@echo "Starting development server..."
	cd basics && pnpm dev

# Build for production
build:
	@echo "Building for production..."
	cd basics && pnpm run build
	@echo "✅ Build complete!"

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	cd basics && rm -rf dist node_modules/.vite
	@echo "✅ Clean complete!"

# List all available scenes
scenes:
	@echo "Available scenes in basics/src/scenes/:"
	@ls -1 basics/src/scenes/ | sed 's/\.js$$//' | sed 's/^/  - /'

# Run a specific scene
run-scene:
	@if [ -z "$(SCENE)" ]; then \
		echo "❌ Error: Please specify a scene name"; \
		echo "Usage: make run-scene SCENE=scene-name"; \
		echo "Available scenes:"; \
		make scenes; \
		exit 1; \
	fi
	@if [ ! -f "basics/src/scenes/$(SCENE).js" ]; then \
		echo "❌ Error: Scene '$(SCENE)' not found"; \
		echo "Available scenes:"; \
		make scenes; \
		exit 1; \
	fi
	@echo "Switching to scene: $(SCENE)"
	@make switch-scene SCENE=$(SCENE)
	@echo "Starting development server..."
	cd basics && pnpm run dev

# Switch to a specific scene by updating main.js
switch-scene:
	@echo "Updating main.js to use scene: $(SCENE)"
	@cp basics/src/main.js basics/src/main.js.backup
	@echo "// Auto-generated by Makefile" > basics/src/main.js
	@echo "// Scene: $(SCENE)" >> basics/src/main.js
	@echo "import animate from './scenes/$(SCENE).js';" >> basics/src/main.js
	@echo "animate();" >> basics/src/main.js
	@echo "✅ Switched to scene: $(SCENE)"

# Restore original main.js
restore-main:
	@if [ -f "basics/src/main.js.backup" ]; then \
		cp basics/src/main.js.backup basics/src/main.js; \
		echo "✅ Restored original main.js"; \
	else \
		echo "❌ No backup found"; \
	fi

# Quick development commands
quick-dev:
	@echo "Quick development start..."
	cd basics && pnpm run dev

# Check project status
status:
	@echo "Project Status:"
	@echo "  - Dependencies: $$(if [ -d "basics/node_modules" ]; then echo "✅ Installed"; else echo "❌ Not installed"; fi)"
	@echo "  - Available scenes:"
	@make scenes

# Development workflow shortcuts
start: dev
restart: clean dev
rebuild: clean build 